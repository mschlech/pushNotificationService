/**
 * @author marcus (at) entscheidungsbaum
 *
 */

package com.entscheidungsbaum

import akka.actor.{Actor,Props}



class PushNotificationServiceActor extends Actor {

}

class PushReceiverActor extends Actor {

  val applePushReceiverActor = context.actor(Props[ApplePushReceiverActor])
  def receive = {
    case message: String => sender ! (message.toUpperCase + " sending to push service")
  }
}

class ApplePushReceiverActor extends Actor {

  def receive = {
    case message:String => sender ! (message.toUpperCase + "received a apple push service request")
  }
  
}   

class AndroidPushReceiverActor extends Actor {

  def receive = {
    case message:String => sender ! (message.toUpperCase + "received a android push service request")
  }
  
}


import akka.kernel.Bootable

class PushNotificationServiceKernel { // extends Bootable {

  val system = {

   // case message : String => sender ! (message.toUpperCase + "push test" )
  }

  def startup = {
   // system.actorOf(Props[PushReceiver]) ! Start
  }

  def shutdown = {
    //system.shutdown()
  }

}


